연관관계 매핑시 고려사항 3가지
- 다중성 (ex 일대다)
- 단방향, 양방향
- 연관관계의 주인

다중성 (왼쪽이 연관관계의 주인일 때를 설명함)
- 다대일: @ManyToOne
  DB에서는 항상 '다'쪽에 외래 키가 있음 -> 따라서 보통은 다대일이 연관관계의 주인이 되는 경우가 많음

- 일대다: @OneToMany
  << 일대다 단방향 >>
  * @JoinColumn(name=[외래키])을 같이 사용해야 함 (안넣으면 디폴트로 @JoinTable 이 실행됨)
  * 기능을 지원하고 있으나, 권장 X
  단점 1) 엔티티가 관리하는 외래 키가 다른 테이블에 있음
  단점 2) 연관관계 관리를 위해 추가로 UPDATE_SQL 실행
  조금 손해를 보더라도 다대일 양방향 관계를 사용하는 것이 유지보수하기 쉬움

  예를 들어, team을 중심으로 member와 일대다 관계에서, member는 team을 알고 싶지 않으나, team은 members를 알고 싶을 수 있음
  그러나 DB에서는 '다'쪽에 외래키가 있어야 하므로 MEMBER가 외래키를 가짐
  따라서 team의 members 값을 바꿨을 때 DB는 MEMBER에 있는 TEAM_ID 외래키를 변경해야 함
  즉, team을 손댔는데 MEMBER 테이블이 업데이트 되는 상황이 오게 됨 -> 이런 류의 테이블이 많아지면 운영이 힘들어짐

  << 일대다 양방향 >>
  공식적으로 존재하진 않지만 야매로 관계를 만들 순 있음
  역방향에 @JoinColumn(insertable=false, updatable=false)
  읽기 전용 필드를 사용해서 양방향처럼 사용하는 방법
  이럴거면 다대일 양방향을 사용하자,,,

- 일대일: @OneToOne
  * 한 가지 컨셉은 외래키가 있는 곳이 주인이 되어야 한다는 점!
  << 일대일 단방향 >>
  주 테이블이나 대상 테이블 중에 외래키 선택 가능
  1) 주 테이블에 외래키
     @OneToOne @JoinColumn(name=[외래키])
     특징) 객체지향 개발자 선호: 백엔드 입장에선 조회를 많이하고 보통 기준이 되는 쪽에 외래키를 설정하는 것이 비즈니스 로직에 유리함
     장점) JPA 매핑 편리, 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능
     단점) 값이 없으면 외래키에 null 허용
  2) 대상 테이블에 외래키 (ex. 외래키는 LOCKER 테이블에 있는데 Member에 locker 필드를 넣고 싶을 때)
     이것은 지원되지도 않고 방법도 없다! -> 대상 테이블에 해당하는 객체를 주인으로 하여, 양방향으로 하는 수밖에
     특징) 전통적인 데이터베이스 개발자 선호: DBA 입장에선 나중에 일대다 가능성이 있어보이는 '다'쪽에 외래키를 설정하는 것이 좋음
     장점) 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지
     단점) 프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩됨
  외래키에 DB 유니크(UNI) 제약조건 추가

  << 일대일 양방향 >>
  역방향에 @OneToOne(mappedBy=[필드명])

- 다대다: @ManyToMany -> 실무에서 거의 안씀
  관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없음 -> 연결 테이블을 추가해서 일대다, 다대일 관계로 풀어내야 함
  객체는 컬렉션을 사용해서 객체 2개로 다대다 관계가 가능함
  실무에서 연결테이블이 단순히 연결만 하고 끝나지 않음. 예를 들어 주문시간, 수량 같은 데이터가 들어올 수 있는데 연결테이블에 그걸 추가할 수 없음 -> 실무에서 사용 불가
  해결책) @ManyToMany, @JoinTable -> @OneToMany, @ManyToOne로 끊고 중간테이블 설정 (code. Member, Product의 @OneToMany / MemberProduct의 @ManyToOne 참고)

단방향, 양방향 (강의필기_연관관계매핑기초.txt에서 설명 했었음)
- 테이블
  외래키 하나로 양쪽 조인 가능 -> 방향이라는 개념 X
- 객체
  참조용 필드가 있는 쪽으로만 참조 가능 -> 한쪽만 참조하면 단방향, 양쪽이 서로 참조하면 양방향

연관관계의 주인 (강의필기_연관관계매핑기초.txt에서 설명 했었음)
- 테이블은 외래 키 하나로 두 테이블이 연관관계를 맺음 <-> 객체 양방향 관계는 A->B, B->A 처럼 참조가 2군데
- 객체 양방향 관계는 참조가 2군데 있기 때문에 둘 중 테이블의 외래키를 관리할 곳을 지정해야 함
- 연관관계의 주인: 외래 키를 관리하는 참조 <-> 반대: 외래 키에 영향을 주지 않고 단순 조회만 가능