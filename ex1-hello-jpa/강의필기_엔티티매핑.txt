엔티티 매핑
1. 객체와 테이블 매핑: @Entity, @Table
2. 필드와 컬럼 매핑: @Column
3. 기본 키 매핑: @Id
4. 연관관계 매핑: @ManyToOne, @JoinColumn

@Entity
: @Entity가 붙은 클래스는 JPA가 관리 (=JPA를 사용해서 테이블과 매핑하려면 @Entity 필수)
주의사항
- 기본 생성자 필수
- 엔티티로 final 클래스, enum, interface, inner 클래스 사용 X
- 필드에 final 사용 X
속성
1. name: JPA에서 사용할 엔티티 이름
- 디폴트는 클래스 이름
- 같은 클래스 이름이 없으면 가급적 디폴트로 냅두자!

@Table
: 엔티티와 매핑할 테이블 지정
속성
1. name: 매핑할 테이블 이름
- 디폴트는  엔티티 이름
2. catalog: 데이터베이스 catalog 매핑
3. schema: 데이터베이스 schema 매핑
4. uniqueConstraints: DDL 생성 시에 유니크 제약 조건 생성

데이터베이스 스키마 자동 생성
: 애플리케이션 실행 시점에 DDL을 자동 생성 (=DB 생성) -> 꼭 개발 단계에서만 사용!!
- 생성된 DDL은 운영서버에서 사용하지 않거나 적절히 다듬은 후 사용
장점
1. 필요할 때 테이블을 만드는 것이므로 객체 중심으로 코드를 짤 수 있음
2. DB 방언을 활용해서 DB에 맞는 적절한 DDL을 생성해줌
hibernate.hbm2ddl.auto 속성
1. create
: 기존 테이블 삭제 후 다시 생성 (DROP + CREATE)
2. create-drop
: create와 같으나 종료시점에 테이블 DROP (테스트 케이스 돌릴 때 주로 사용)
3. update
: 변경분만 반영
- 컬럼을 지우는 것은 안되고 추가하는 것만 됨 (ALTER)
4. validate
: 엔티티와 테이블이 정상 매핑되었는지만 확인
5. none
: 사용하지 않음
단계별 적절한 속성
- 개발 초기 단계: create / update
- 테스트 서버: update / validate
- 스테이징, 운영 서버: validate / none
* 운영 장비에는 절대 create, create-drop, update 사용하면 안됨!! (자동으로 ALTER가 수행되는 것은 위험한 일이기 때문에 update는 가급적 사용하지 말자)

DDL 생성 기능
: DDL을 자동 생성할 때만 사용되고 JPA의 실행 로직에는 영향을 주지 않음 (cf. name 속성 같은 경우는 런타임 시 영향을 줌)
@Column 속성
1. nullable: 컬럼 값 필수 여부
2. unique: 고유해야 하는지 여부
3. legnth: 컬럼 값 길이
@Table 속성
1. uniqueConstraints: 유니크 제약조건
ex) @Table(uniqueConstraints = {@UniqueConstraint(name="NAME_AGE_UNIQUE", columnNames={"NAME", "AGE"} )})

필드와 컬럼 매핑
어노테이션
1. @Column: 컬럼 매핑
2. @Temporal: 날짜 타입 매핑 (TemporalType.TIMESTAMP, TemporalType.DATE, TemporalType.TIME)
- 최근에는 LocalDate, LocalDateTime로 대체 (하이버네이트가 지원함)
3. @Enumerated: enum 타입 매핑 (EnumType.ORDINAL, EnumType.STRING)
- ORDINAL: enum 순서를 DB에 저장 -> 사용X (스프링에서 enum의 순서를 바꾸면 DB에 저장되는 값이 섞여버림)
- STRING: enum 이름을 DB에 저장
4. @Lob: BLOB, CLOB 매핑
- CLOB: String, char[], java.sql.CLOB
- BLOB: byte[], java.sql.BLOB
5. @Transient: 특정 필드를 컬럼에 매핑하지 않음
- 주로 메모리상에서만 임시로 어떤 값을 보관하고 싶을 때 사용

@Column
속성
1. name
: 필드와 매핑할 테이블의 컬럼 이름
2. insertable, updatable
: 등록, 변경 가능 여부 (디폴트 true)
3. nullable(DDL)
: null 값의 허용 여부를 설정, false로 설정하면 DDL 생성시에 not null 제약조건이 붙음
4. unique(DDL)
: @Table의 uniqueConstraints와 같지만 한 컬럼에 간단한 유니크 제약조건을 걸 때 사용
- 한 컬럼만 되고 이름이 알 수 없는 랜덤 값이므로 잘 안 씀
5. columnDefinition(DDL)
: DB 컬럼 정보를 직접 줄 수 있음 (ex. varchar(100) default 'EMPTY')
6. length(DDL)
: 문자 길이 제약조건, String 타입에만 사용
7. precision, scale(DDL)
: BigDecimal, BigInteger 타입에서 사용, precision은 소수점을 포함한 전체 자릿수, scale은 소수의 자릿수를 지정함
- double이나 float 타입에는 적용 안됨. 아주 큰 숫자나 정밀한 소수를 다루어야 할 때 사용

기본 키 매핑
1. 직접 할당 (@Id)
2. 자동 생성 (@GeneratedValue)
strategy 속성값
1) IDENTITY
: DB에 위임, 주로 MySQL에서 사용 (AUTO_INCREMENT)
- JPA는 보통 트랜잭션 커밋 시점에 INSERT SQL을 실행함
- AUTO_INCREMENT는 DB에 INSERT SQL을 실행한 이후에 ID 값을 알 수 있음
- 이를 해결하기 위해 IDENTITY 전략은 em.persist() 시점에 즉시 INSERT_SQL을 실행함 -> 그 즉시 DB에서 식별자를 조회 가능
2) SEQUENCE (@SequenceGenerator 필요)
: DB 시퀀스 오브젝트 사용, 주로 ORACLE, H2 에서 사용
- 필드타입은 Long을 권장
- DB 시퀀스는 유일한 값을 순서대로 생성하는 특별한 DB 오브젝트임
- 키 값을 할당하기 위해서 계속 시퀀스 조회=next call을 해야 함
- allocationSize: DB에 미리 사이즈 올려놓고 그 갯수만큼은 DB 왔다갔다 없이 메모리에서 사용 -> 여러 웹서버가 있어도 동시성 이슈 없이 다양한 문제들을 해결해줌
- 다만 DB 시퀀스 값이 하나씩 증가하도록 설정되어 있으면 반드시 allcationSize=1로 설졍해야 함
3) TABLE (@TableGenerator 필요)
: 키 생성용 테이블 사용, 모든 DB에서 사용
- 키 생성 전용 테이블을 하나 만들어서 DB 시퀀스를 흉내내는 전략 -> 성능 저하가 될 수 있음
next Call을 항상 호출하면
4) AUTO
: 방언에 따라 자동 지정

권장하는 식별자 전략
- 기본 키 제약조건: null X, 유일, 변동 X
- 미래까지 이 조건을 만족하는 자연키는 찾기 어려움 (주민등록번호도 언젠가 문제가 될 수 있기 때문에 적절하지 않음)
- 권장: Long형 + 대체키 + 키 생성전략 사용




